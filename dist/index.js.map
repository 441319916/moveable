{"version":3,"file":"index.js","sources":["../../src/InnerMoveable.tsx","../../src/Moveable.tsx","../src/consts.ts","../src/index.ts"],"sourcesContent":["import { Component, h } from \"preact\";\nimport Moveable, { MoveableProps, MoveableInterface } from \"preact-moveable\";\nimport { ref } from \"framework-utils\";\n\nexport default class InnerMoveable extends Component<MoveableProps> {\n    public state: MoveableProps = {};\n    public preactMoveable: MoveableInterface;\n    constructor(props: MoveableProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        return <Moveable ref={ref(this, \"preactMoveable\")} {...this.state} />;\n    }\n}\n","import EgComponent from \"@egjs/component\";\nimport { ref } from \"framework-utils\";\nimport { h, render } from \"preact\";\nimport InnerMoveable from \"./InnerMoveable\";\nimport { MoveableOptions } from \"./types\";\nimport {\n    OnDragStart, OnDrag, OnResize, OnResizeStart,\n    OnResizeEnd, OnScaleStart, OnScaleEnd, OnRotateStart,\n    OnRotateEnd, OnDragEnd, OnRotate, OnScale, OnWarpStart, OnWarpEnd, OnWarp, OnPinchStart, OnPinch, OnPinchEnd,\n} from \"react-moveable/declaration/types\";\n\n/**\n * Moveable is Draggable! Resizable! Scalable! Rotatable!\n * @sort 1\n * @extends eg.Component\n */\nclass Moveable extends EgComponent {\n    private innerMoveable!: InnerMoveable;\n\n    /**\n     *\n     */\n    constructor(parentElement: HTMLElement | SVGElement, options: MoveableOptions = {}) {\n        super();\n        const element = document.createElement(\"div\");\n        const nextOptions = { container: parentElement, ...options };\n\n        render(\n            <InnerMoveable\n                ref={ref(this, \"innerMoveable\")}\n                {...nextOptions}\n                onDragStart={this.onDragStart}\n                onDrag={this.onDrag}\n                onDragEnd={this.onDragEnd}\n                onResizeStart={this.onResizeStart}\n                onResize={this.onResize}\n                onResizeEnd={this.onResizeEnd}\n                onScaleStart={this.onScaleStart}\n                onScale={this.onScale}\n                onScaleEnd={this.onScaleEnd}\n                onRotateStart={this.onRotateStart}\n                onRotate={this.onRotate}\n                onRotateEnd={this.onRotateEnd}\n                onWarpStart={this.onWarpStart}\n                onWarp={this.onWarp}\n                onWarpEnd={this.onWarpEnd}\n                onPinchStart={this.onPinchStart}\n                onPinch={this.onPinch}\n                onPinchEnd={this.onPinchEnd}\n            />,\n            element,\n        );\n        parentElement.appendChild(element.children[0]);\n    }\n    /**\n     * Whether or not the origin controlbox will be visible or not\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.origin = true;\n     */\n    get origin() {\n        return this.getMoveableProps().origin;\n    }\n    set origin(origin: boolean) {\n        this.innerMoveable.setState({\n            origin,\n        });\n    }\n    /**\n     * The target to indicate Moveable Control Box.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     * moveable.target = document.querySelector(\".target\");\n     */\n    get target(): HTMLElement | SVGElement {\n        return this.getMoveableProps().target;\n    }\n    set target(target: HTMLElement | SVGElement) {\n        if (target !== this.target) {\n            this.innerMoveable.setState({\n                target,\n            });\n        } else {\n            this.updateRect();\n        }\n    }\n    /**\n     * Whether or not target can be dragged.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.draggable = true;\n     */\n    get draggable(): boolean {\n        return this.getMoveableProps().draggable || false;\n    }\n    set draggable(draggable: boolean) {\n        this.innerMoveable.setState({\n            draggable,\n        });\n    }\n    /**\n     * Whether or not target can be resized.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.resizable = true;\n     */\n    get resizable(): boolean {\n        return this.getMoveableProps().resizable;\n    }\n    set resizable(resizable: boolean) {\n        this.innerMoveable.setState({\n            resizable,\n        });\n    }\n    /**\n     * Whether or not target can scaled.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.scalable = true;\n     */\n    get scalable(): boolean {\n        return this.getMoveableProps().scalable;\n    }\n    set scalable(scalable: boolean) {\n        this.innerMoveable.setState({\n            scalable,\n        });\n    }\n    /**\n     * Whether or not target can be rotated.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.rotatable = true;\n     */\n    get rotatable(): boolean {\n        return this.getMoveableProps().rotatable;\n    }\n    set rotatable(rotatable: boolean) {\n        this.innerMoveable.setState({\n            rotatable,\n        });\n    }\n    /**\n     * Whether or not target can be warped.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.warpable = true;\n     */\n    get warpable(): boolean {\n        return this.getMoveableProps().warpable;\n    }\n    set warpable(warpable: boolean) {\n        this.innerMoveable.setState({\n            warpable,\n        });\n    }\n    /**\n     * Whether or not target can be pinched with draggable, resizable, scalable, rotatable\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.pinchable = true;\n     */\n    get pinchable(): boolean | Array<\"rotatable\" | \"scalable\" | \"resizable\"> {\n        return this.getMoveableProps().pinchable;\n    }\n    set pinchable(pinchable: boolean | Array<\"rotatable\" | \"scalable\" | \"resizable\">) {\n        this.innerMoveable.setState({\n            pinchable,\n        });\n    }\n    /**\n     * When resize or scale, keeps a ratio of the width, height.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.keepRatio = true;\n     */\n    get keepRatio(): boolean {\n        return this.getMoveable().props.keepRatio;\n    }\n    set keepRatio(keepRatio: boolean) {\n        this.innerMoveable.setState({\n            keepRatio,\n        });\n    }\n    /**\n     * throttle of x, y when drag.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleDrag = 1;\n     */\n    get throttleDrag(): number {\n        return this.getMoveable().props.throttleDrag;\n    }\n    set throttleDrag(throttleDrag: number) {\n        this.innerMoveable.setState({\n            throttleDrag,\n        });\n    }\n    /**\n     * throttle of width, height when resize.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleResize = 1;\n     */\n    get throttleResize(): number {\n        return this.getMoveable().props.throttleResize;\n    }\n    set throttleResize(throttleResize: number) {\n        this.innerMoveable.setState({\n            throttleResize,\n        });\n    }\n    /**\n     * throttle of scaleX, scaleY when scale.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleScale = 0.1;\n     */\n    get throttleScale(): number {\n        return this.getMoveable().props.throttleScale;\n    }\n    set throttleScale(throttleScale: number) {\n        this.innerMoveable.setState({\n            throttleScale,\n        });\n    }\n    /**\n     * hrottle of angle(degree) when rotate.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.throttleRotate = 1;\n     */\n    get throttleRotate(): number {\n        return this.getMoveable().props.throttleRotate;\n    }\n    set throttleRotate(throttleRotate: number) {\n        this.innerMoveable.setState({\n            throttleRotate,\n        });\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: HTMLElement | SVGElement) {\n        return this.getMoveable().isMoveableElement(target);\n    }\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect() {\n        this.getMoveable().updateRect();\n    }\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * @param - the values of x and y to move moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(): void {\n        this.getMoveable().updateTarget();\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy() {\n        const el = this.getMoveable().base;\n\n        el.remove ? el.remove() : el.parentElement.removeChild(el);\n        this.innerMoveable = null;\n        this.getMoveable().componentWillUnmount();\n    }\n    private getMoveable() {\n        return this.innerMoveable.preactMoveable;\n    }\n    private getMoveableProps() {\n        return this.getMoveable().props;\n    }\n    private onDragStart = (e: OnDragStart) => {\n        this.trigger(\"dragStart\", e);\n    }\n    private onDrag = (e: OnDrag) => {\n        this.trigger(\"drag\", e);\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        this.trigger(\"dragEnd\", e);\n    }\n    private onResizeStart = (e: OnResizeStart) => {\n        this.trigger(\"resizeStart\", e);\n    }\n    private onResize = (e: OnResize) => {\n        this.trigger(\"resize\", e);\n    }\n    private onResizeEnd = (e: OnResizeEnd) => {\n        this.trigger(\"resizeEnd\", e);\n    }\n    private onScaleStart = (e: OnScaleStart) => {\n        this.trigger(\"scaleStart\", e);\n    }\n    private onScale = (e: OnScale) => {\n        this.trigger(\"scale\", e);\n    }\n    private onScaleEnd = (e: OnScaleEnd) => {\n        this.trigger(\"scaleEnd\", e);\n    }\n    private onRotateStart = (e: OnRotateStart) => {\n        this.trigger(\"rotateStart\", e);\n    }\n    private onRotate = (e: OnRotate) => {\n        this.trigger(\"rotate\", e);\n    }\n    private onRotateEnd = (e: OnRotateEnd) => {\n        this.trigger(\"rotateEnd\", e);\n    }\n    private onWarpStart = (e: OnWarpStart) => {\n        this.trigger(\"warpStart\", e);\n    }\n    private onWarp = (e: OnWarp) => {\n        this.trigger(\"warp\", e);\n    }\n    private onWarpEnd = (e: OnWarpEnd) => {\n        this.trigger(\"warpEnd\", e);\n    }\n    private onPinchStart = (e: OnPinchStart) => {\n        this.trigger(\"pinchStart\", e);\n    }\n    private onPinch = (e: OnPinch) => {\n        this.trigger(\"pinch\", e);\n    }\n    private onPinchEnd = (e: OnPinchEnd) => {\n        this.trigger(\"pinchEnd\", e);\n    }\n}\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable\n * @event dragStart\n * @param {Moveable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable\n * @event drag\n * @param {Moveable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable\n * @event dragEnd\n * @param {Moveable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable\n * @event resizeStart\n * @param {Moveable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable\n * @event resize\n * @param {Moveable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable\n * @event resizeEnd\n * @param {Moveable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable\n * @event scaleStart\n * @param {Moveable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable\n * @event scale\n * @param {Moveable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable\n * @event scaleEnd\n * @param {Moveable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable\n * @event rotateStart\n * @param {Moveable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When rotating, the rotate event is called.\n * @memberof Moveable\n * @event rotate\n * @param {Moveable.OnRotate} - Parameters for the rotate event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotate\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable\n * @event rotateEnd\n * @param {Moveable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable\n* @event warpStart\n* @param {Moveable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n/**\n * When warping, the warp event is called.\n * @memberof Moveable\n * @event warp\n * @param {Moveable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable\n * @event warpEnd\n * @param {Moveable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable\n * @event pinchStart\n * @param {Moveable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable\n * @event pinch\n * @param {Moveable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable\n * @event pinchEnd\n * @param {Moveable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\nexport default Moveable;\n\ndeclare interface Moveable {\n    on(eventName: \"drag\", handlerToAttach: (event: OnDrag) => any): this;\n    on(eventName: \"dragStart\", handlerToAttach: (event: OnDragStart) => any): this;\n    on(eventName: \"dragEnd\", handlerToAttach: (event: OnDragEnd) => any): this;\n    on(eventName: \"resize\", handlerToAttach: (event: OnResize) => any): this;\n    on(eventName: \"resizeStart\", handlerToAttach: (event: OnResizeStart) => any): this;\n    on(eventName: \"resizeEnd\", handlerToAttach: (event: OnResizeEnd) => any): this;\n    on(eventName: \"scale\", handlerToAttach: (event: OnScale) => any): this;\n    on(eventName: \"scaleStart\", handlerToAttach: (event: OnScaleStart) => any): this;\n    on(eventName: \"scaleEnd\", handlerToAttach: (event: OnScaleEnd) => any): this;\n    on(eventName: \"rotate\", handlerToAttach: (event: OnRotate) => any): this;\n    on(eventName: \"rotateStart\", handlerToAttach: (event: OnRotateStart) => any): this;\n    on(eventName: \"rotateEnd\", handlerToAttach: (event: OnRotateEnd) => any): this;\n    on(eventName: \"warp\", handlerToAttach: (event: OnWarp) => any): this;\n    on(eventName: \"warpStart\", handlerToAttach: (event: OnWarpStart) => any): this;\n    on(eventName: \"warpEnd\", handlerToAttach: (event: OnWarpEnd) => any): this;\n    on(eventName: \"pinch\", handlerToAttach: (event: OnPinch) => any): this;\n    on(eventName: \"pinchStart\", handlerToAttach: (event: OnPinchStart) => any): this;\n    on(eventName: \"pinchEnd\", handlerToAttach: (event: OnPinchEnd) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n","export const codes = {\n    draggable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\n/* const translate = [0, 0]; */\nconst draggable = new Moveable(document.body, {\n    target: document.querySelector(\".draggable\"),\n    draggable: true,\n    throttleDrag: 0,\n}).on(\"drag\", ({ left, top, beforeDelta }) => {\n    e.target.style.left = left + \"px\";\n    e.target.style.top = top + \"px\";\n\n    /* translate[0] += beforeDelta[0]; */\n    /* translate[1] += beforeDelta[1]; */\n    /* e.target.style.transform\n        = \"translateX(\" + translate[0] + \"px) \"\n        + \"translateY(\" + translate[1] + \"px)\"; */\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\nthis.translate = [0, 0];\nreturn (\n    <Moveable\n        target={document.querySelector(\".draggable\")}\n        draggable={true}\n        throttleDrag={0}\n        onDrag={({ left, top, beforeDelta }) => {\n            e.target.style.left = left + \"px\";\n            e.target.style.top = top + \"px\";\n\n            /* const translate = this.translate */\n            /* translate[0] += beforeDelta[0]; */\n            /* translate[1] += beforeDelta[1]; */\n            /* e.target.style.transform\n                = \"translateX(\" + translate[0] + \"px) \"\n                + \"translateY(\" + translate[1] + \"px)\"; */\n        }}\n    />\n);\n        `,\n    },\n    resizable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst resizable = new Moveable(document.body, {\n    target: document.querySelector(\".resizable\"),\n    resizable: true,\n    throttleResize: 0,\n    keepRatio: true,\n}).on(\"resize\", e => {\n    console.log(e.width, e.height, e.dist);\n    e.target.style.width = e.width + \"px\";\n    e.target.style.height = e.height + \"px\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".resizable\")}\n        resizable={true}\n        throttleResize={0}\n        keepRatio={true}\n        onResize={e => {\n            console.log(e.width, e.height, e.dist);\n            e.target.style.width = e.width + \"px\";\n            e.target.style.height = e.height + \"px\";\n        }}\n    />\n);\n        `,\n    },\n    scalable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst scale = [1, 1];\nconst scalable = new Moveable(document.body, {\n    target: document.querySelector(\".scalable\"),\n    scalable: true,\n    throttleScale: 0,\n    keepRatio: true,\n}).on(\"scale\", ({ dist }) => {\n    scale[0] *= dist[0];\n    scale[1] *= dist[1];\n    e.target.style.transform = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.scale = [1, 1];\nreturn (\n    <Moveable\n        target={document.querySelector(\".scalable\")}\n        scalable={true}\n        throttleScale={0}\n        keepRatio={true}\n        onScale={({ dist }) => {\n            const scale = this.scale;\n            scale[0] *= dist[0];\n            scale[1] *= dist[1];\n            e.target.style.transform\n                = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n        }}\n    />\n);\n        `,\n    },\n    rotatable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nlet rotate = 0;\n\nconst rotatable = new Moveable(document.body, {\n    target: document.querySelector(\".rotatable\"),\n    rotatable: true,\n    throttleRotate: 0,\n}).on(\"rotate\", ({ beforeDelta, delta }) => {\n    rotate += delta;\n    e.target.style.transform\n        = \"rotate(\" + rotate +  \"deg)\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.rotate = 0;\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".rotatable\")}\n        rotatable={true}\n        throttleRotate={0}\n        onRotate={({ beforeDelta, delta }) => {\n            this.rotate += delta;\n            e.target.style.transform\n                = \"rotate(\" + this.rotate +  \"deg)\";\n        }}\n    />\n);\n        `,\n    },\n    warpable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nlet matrix = [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n];\n\nconst warpable = new Moveable(document.body, {\n    target: document.querySelector(\".warpable\"),\n    warpable: true,\n    throttleRotate: 0,\n}).on(\"warp\", ({ multiply, delta }) => {\n    matrix = multiply(matrix, delta);\n    e.target.style.transform\n        = \"matrix3d(\" + matrix.join(\",\") +  \")\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.matrix = [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n];\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".warpable\")}\n        warpable={true}\n        onWarp={({ multiply, delta }) => {\n            this.matrix = multiply(this.matrix, delta);\n            e.target.style.transform\n                = \"matrix3d(\" + matrix.join(\",\") +  \")\";\n        }}\n    />\n);\n        `,\n    },\n    pinchable: {\n        vanilla: `\nimport Moveable from \"moveable\";\nconst scale = [1, 1];\nlet rotate = 0;\n\nconst pinchable = new Moveable(document.body, {\n    target: document.querySelector(\".pinchable\"),\n    pinchable: [\"rotatable\", \"scalable\"],\n}).on(\"rotate\", ({ target, beforeDelta }) => {\n    rotate += beforeDelta;\n    target.style.transform = \"scale(\" + scale.join(\", \") + \") rotate(\" + rotate + \"deg)\";\n}).on(\"scale\", ({ target, delta }) => {\n    scale[0] += delta[0];\n    scale[1] += delta[1];\n    target.style.transform = \"scale(\" + scale.join(\", \") + \") rotate(\" + rotate + \"deg)\";\n});`,\n    react: `\nimport Moveable from \"react-moveable\";\nthis.scale = [1, 1];\nthis.rotate = 0;\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".pinchable\")}\n        pinchable={[\"rotatable\", \"scalable\"]},\n        onRotate={({ target, beforeDelta }) => {\n            this.rotate += beforeDelta;\n            target.style.transform\n                = \"scale(\" + this.scale.join(\", \") + \") \"\n                + \"rotate(\" + this.rotate + \"deg)\";\n        }}\n        onScale={({ target, beforeDelta }) => {\n            this.scale[0] += delta[0];\n            this.scale[1] += delta[1];\n            target.style.transform\n                = \"scale(\" + this.scale.join(\", \") + \") \"\n                + \"rotate(\" + this.rotate + \"deg)\";\n        }}\n    />\n);`,\n    },\n    origin: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst rotatable = new Moveable(document.body, {\n    target: document.querySelector(\".origin\"),\n    rotatable: true,\n    origin: true,\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".origin\")}\n        rotatable={true}\n        origin={true}\n    />\n);\n        `,\n    },\n};\n","import Moveable from \"../../src/Moveable\";\nimport { codes } from \"./consts\";\nimport { Frame } from \"scenejs\";\nimport \"./index.css\";\nimport { hasClass } from \"@daybrush/utils\";\n\ndeclare const hljs: any;\n\nconst moveableElement: HTMLElement = document.querySelector(\".moveable\");\nconst labelElement: HTMLElement = document.querySelector(\".label\");\n\nconst frame = new Frame({\n    width: \"250px\",\n    height: \"200px\",\n    left: \"0px\",\n    top: \"0px\",\n    transform: {\n        rotate: \"0deg\",\n        scaleX: 1,\n        scaleY: 1,\n        matrix3d: [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ],\n    },\n});\n\nfunction setTransform(target: HTMLElement | SVGElement) {\n    target.style.cssText = frame.toCSS();\n}\nfunction setLabel(clientX: number, clientY: number, text: string) {\n    // tslint:disable-next-line: max-line-length\n\n    labelElement.style.cssText = `\n    display: block; transform: translate(${clientX}px, ${clientY - 10}px) translate(-100%, -100%);`;\n\n    labelElement.innerHTML = text;\n}\n\n\nconst moveable = new Moveable(moveableElement.parentElement, {\n    target: moveableElement,\n    origin: false,\n    draggable: true,\n    rotatable: true,\n    scalable: true,\n    pinchable: true,\n    keepRatio: false,\n    throttleDrag: 1,\n    throttleScale: 0.01,\n    throttleRotate: 0.2,\n    throttleResize: 1,\n}).on(\"pinch\", ({ clientX, clientY }) => {\n    setTimeout(() => {\n        setLabel(clientX, clientY, `X: ${frame.get(\"left\")}\n        <br/>Y: ${frame.get(\"top\")}\n        <br/>W: ${frame.get(\"width\")}\n        <br/>H: ${frame.get(\"height\")}\n        <br/>S: ${frame.get(\"transform\", \"scaleX\").toFixed(2)}, ${frame.get(\"transform\", \"scaleY\").toFixed(2)}\n        <br/>R: ${parseFloat(frame.get(\"transform\", \"rotate\")).toFixed(1)}deg\n        `);\n    });\n}).on(\"drag\", ({ target, left, top, clientX, clientY, isPinch }) => {\n    frame.set(\"left\", `${left}px`);\n    frame.set(\"top\", `${top}px`);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `X: ${left}px<br/>Y: ${top}px`);\n\n}).on(\"scale\", ({ target, dist, clientX, clientY, isPinch }) => {\n    const scaleX = frame.get(\"transform\", \"scaleX\") * dist[0];\n    const scaleY = frame.get(\"transform\", \"scaleY\") * dist[1];\n    frame.set(\"transform\", \"scaleX\", scaleX);\n    frame.set(\"transform\", \"scaleY\", scaleY);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `S: ${scaleX.toFixed(2)}, ${scaleY.toFixed(2)}`);\n\n}).on(\"rotate\", ({ target, beforeDelta, clientX, clientY, isPinch }) => {\n    const deg = parseFloat(frame.get(\"transform\", \"rotate\")) + beforeDelta;\n\n    frame.set(\"transform\", \"rotate\", `${deg}deg`);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `R: ${deg.toFixed(1)}`);\n}).on(\"resize\", ({ target, width, height, clientX, clientY, isPinch }) => {\n    frame.set(\"width\", `${width}px`);\n    frame.set(\"height\", `${height}px`);\n    setTransform(target);\n    !isPinch &&  setLabel(clientX, clientY, `W: ${width}px<br/>H: ${height}px`);\n}).on(\"warp\", ({ target, multiply, delta, clientX, clientY }) => {\n    frame.set(\"transform\", \"matrix3d\", multiply(frame.get(\"transform\", \"matrix3d\"), delta));\n    setTransform(target);\n    setLabel(clientX, clientY, `X: ${clientX}px<br/>Y: ${clientY}px`);\n}).on(\"dragEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"scaleEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"rotateEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"resizeEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"warpEnd\", () => {\n    labelElement.style.display = \"none\";\n});\n\nconst draggableElement: HTMLElement = document.querySelector(\".draggable\");\nconst draggable = new Moveable(draggableElement.parentElement, {\n    target: draggableElement,\n    origin: false,\n    draggable: true,\n}).on(\"drag\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst resizableElement: HTMLElement = document.querySelector(\".resizable\");\nconst resizable = new Moveable(resizableElement.parentElement, {\n    target: resizableElement,\n    origin: false,\n    resizable: true,\n}).on(\"resize\", ({ target, width, height }) => {\n    target.style.width = `${width}px`;\n    target.style.height = `${height}px`;\n});\n\nconst scalableElement: HTMLElement = document.querySelector(\".scalable\");\nconst scalable = new Moveable(scalableElement.parentElement, {\n    target: scalableElement,\n    origin: false,\n    scalable: true,\n}).on(\"scale\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst rotatableElement: HTMLElement = document.querySelector(\".rotatable\");\nconst rotatable = new Moveable(rotatableElement.parentElement, {\n    target: rotatableElement,\n    origin: false,\n    rotatable: true,\n}).on(\"rotate\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\nconst warpableElement: HTMLElement = document.querySelector(\".warpable\");\nconst warpable = new Moveable(warpableElement.parentElement, {\n    target: warpableElement,\n    warpable: true,\n    origin: false,\n}).on(\"warp\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst originElement: HTMLElement = document.querySelector(\".origin\");\nconst origin = new Moveable(originElement.parentElement, {\n    target: originElement,\n    origin: true,\n    draggable: true,\n    rotatable: true,\n}).on(\"drag\", ({ target, left, top }) => {\n    target.style.left = `${left}px`;\n    target.style.top = `${top}px`;\n}).on(\"rotate\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst pinchableElement: HTMLElement = document.querySelector(\".pinchable\");\nconst scale = [1, 1];\nlet rotate = 0;\nconst pinchable = new Moveable(pinchableElement.parentElement, {\n    target: pinchableElement,\n    pinchable: [\"rotatable\", \"scalable\"],\n    origin: false,\n}).on(\"rotate\", ({ beforeDelta }) => {\n    rotate += beforeDelta;\n\n    pinchableElement.style.transform = `scale(${scale.join(\", \")}) rotate(${rotate}deg)`;\n}).on(\"scale\", ({ delta }) => {\n    scale[0] += delta[0];\n    scale[1] += delta[1];\n\n    pinchableElement.style.transform = `scale(${scale.join(\", \")}) rotate(${rotate}deg)`;\n});\n\nwindow.addEventListener(\"resize\", () => {\n    moveable.updateRect();\n    draggable.updateRect();\n    resizable.updateRect();\n    scalable.updateRect();\n    rotatable.updateRect();\n    warpable.updateRect();\n    pinchable.updateRect();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.querySelectorAll(\"pre\").forEach((pre: HTMLElement) => {\n        const group = pre.getAttribute(\"data-group\");\n        const panel = pre.getAttribute(\"data-panel\");\n        const block = pre.querySelector(\"code\");\n\n        let code = codes[group][panel === \"preact\" ? \"react\" : panel].trim();\n\n        if (panel === \"preact\") {\n            code = code.replace(/react/g, \"preact\");\n        }\n        block.innerText = code;\n        hljs.highlightBlock(block);\n    });\n});\n\nconst ableElement = document.querySelector(\".buttons.able\");\nconst ableButtonElements = [].slice.call(ableElement.children);\n\nableElement.addEventListener(\"click\", e => {\n    const target = (e.target as HTMLElement);\n    const able = target.getAttribute(\"data-able\");\n\n    if (!able) {\n        return;\n    }\n    ableButtonElements.forEach((el: HTMLElement) => {\n        el.classList.remove(\"selected\");\n    });\n    target.classList.add(\"selected\");\n\n    if (able === \"warpable\") {\n        moveable.resizable = false;\n        moveable.scalable = false;\n        moveable.warpable = true;\n    } else if (able === \"scalable\") {\n        moveable.resizable = false;\n        moveable.scalable = true;\n        moveable.warpable = false;\n    } else if (able === \"resizable\") {\n        moveable.resizable = true;\n        moveable.scalable = false;\n        moveable.warpable = false;\n    }\n});\n\nconst tabGroups = {};\n\n[].slice.call(document.querySelectorAll(\"[data-tab]\")).forEach(tabElement => {\n    const group = tabElement.getAttribute(\"data-group\");\n    const tab = tabElement.getAttribute(\"data-tab\");\n    const panelElement = document.querySelector(`[data-group=\"${group}\"][data-panel=\"${tab}\"]`);\n\n    !tabGroups[group] && (tabGroups[group] = []);\n    tabGroups[group].push([tabElement, panelElement]);\n\n    tabElement.addEventListener(\"click\", () => {\n        tabGroups[group].forEach(([otherTabElement, otherPanelElement]) => {\n            if (tabElement === otherTabElement) {\n                return;\n            }\n            otherTabElement.classList.remove(\"selected\");\n            otherPanelElement.classList.remove(\"selected\");\n        });\n        tabElement.classList.add(\"selected\");\n        panelElement.classList.add(\"selected\");\n    });\n});\n"],"names":["props","_super","_this","state","tslib_1","h","Moveable","ref","this","Component","parentElement","options","e","trigger","element","document","createElement","nextOptions","container","render","InnerMoveable","onDragStart","onDrag","onDragEnd","onResizeStart","onResize","onResizeEnd","onScaleStart","onScale","onScaleEnd","onRotateStart","onRotate","onRotateEnd","onWarpStart","onWarp","onWarpEnd","onPinchStart","onPinch","onPinchEnd","appendChild","children","Object","getMoveableProps","origin","innerMoveable","setState","target","updateRect","draggable","resizable","scalable","rotatable","warpable","pinchable","getMoveable","keepRatio","throttleDrag","throttleResize","throttleScale","throttleRotate","isMoveableElement","updateTarget","el","base","remove","removeChild","componentWillUnmount","preactMoveable","EgComponent","codes","vanilla","react","moveableElement","querySelector","labelElement","frame","Frame","width","height","left","top","transform","rotate","scaleX","scaleY","matrix3d","setTransform","style","cssText","toCSS","setLabel","clientX","clientY","text","innerHTML","moveable","on","_a","setTimeout","get","toFixed","parseFloat","isPinch","set","dist","beforeDelta","deg","multiply","delta","display","draggableElement","resizableElement","scalableElement","rotatableElement","warpableElement","originElement","pinchableElement","scale","join","window","addEventListener","querySelectorAll","forEach","pre","group","getAttribute","panel","block","code","trim","replace","innerText","hljs","highlightBlock","ableElement","ableButtonElements","slice","call","able","classList","add","tabGroups","tabElement","tab","panelElement","push","otherTabElement","otherPanelElement"],"mappings":"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"}