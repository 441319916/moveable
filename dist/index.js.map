{"version":3,"file":"index.js","sources":["../../src/InnerMoveable.tsx","../../src/consts.ts","../../src/Moveable.tsx","../src/consts.ts","../src/index.ts"],"sourcesContent":["import { Component, h } from \"preact\";\nimport Moveable, { MoveableProps, MoveableInterface } from \"preact-moveable\";\nimport { ref } from \"framework-utils\";\n\nexport default class InnerMoveable extends Component<MoveableProps> {\n    public state: MoveableProps = {};\n    public preactMoveable: MoveableInterface;\n    constructor(props: MoveableProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        return <Moveable ref={ref(this, \"preactMoveable\")} {...this.state} />;\n    }\n}\n","\nexport const PROPERTIES = [\n  \"draggable\", \"resizable\", \"scalable\", \"rotatable\",\n  \"warpable\", \"pinchable\", \"origin\", \"target\",\n  \"throttleDrag\", \"throttleResize\", \"throttleRotate\", \"keepRatio\",\n];\nexport const EVENTS = [\n  \"dragStart\",\n  \"drag\",\n  \"dragEnd\",\n  \"resizeStart\",\n  \"resize\",\n  \"resizeEnd\",\n  \"scaleStart\",\n  \"scale\",\n  \"scaleEnd\",\n  \"rotateStart\",\n  \"rotate\",\n  \"rotateEnd\",\n  \"warpStart\",\n  \"warp\",\n  \"warpEnd\",\n  \"pinchStart\",\n  \"pinch\",\n  \"pinchEnd\",\n];\n","import EgComponent from \"@egjs/component\";\nimport { ref, Properties } from \"framework-utils\";\nimport { h, render } from \"preact\";\nimport InnerMoveable from \"./InnerMoveable\";\nimport { MoveableOptions, MoveableGetterSetter } from \"./types\";\nimport {\n    OnDragStart, OnDrag, OnResize, OnResizeStart,\n    OnResizeEnd, OnScaleStart, OnScaleEnd, OnRotateStart,\n    OnRotateEnd, OnDragEnd, OnRotate, OnScale, OnWarpStart, OnWarpEnd, OnWarp, OnPinchStart, OnPinch, OnPinchEnd,\n} from \"react-moveable/declaration/types\";\nimport { PROPERTIES, EVENTS } from \"./consts\";\nimport { camelize } from \"@daybrush/utils\";\n\n/**\n * Moveable is Draggable! Resizable! Scalable! Rotatable!\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES, (prototype, property) => {\n    Object.defineProperty(prototype, property, {\n        get() {\n            return this.getMoveable().props[property];\n        },\n        set(value) {\n            this.innerMoveable.setState({\n                [property]: value,\n            });\n        },\n        enumerable: true,\n        configurable: true,\n    });\n})\nclass Moveable extends EgComponent {\n    private innerMoveable!: InnerMoveable;\n\n    /**\n     *\n     */\n    constructor(parentElement: HTMLElement | SVGElement, options: MoveableOptions = {}) {\n        super();\n        const element = document.createElement(\"div\");\n        const nextOptions = { container: parentElement, ...options };\n\n        const events: any = {};\n\n        EVENTS.forEach(name => {\n            events[camelize(`on ${name}`)] = (e: any) => this.trigger(name, e);\n        });\n\n        render(\n            <InnerMoveable\n                ref={ref(this, \"innerMoveable\")}\n                {...nextOptions}\n                {...events}\n            />,\n            element,\n        );\n        parentElement.appendChild(element.children[0]);\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: HTMLElement | SVGElement) {\n        return this.getMoveable().isMoveableElement(target);\n    }\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect() {\n        this.getMoveable().updateRect();\n    }\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * @param - the values of x and y to move moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(): void {\n        this.getMoveable().updateTarget();\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy() {\n        const el = this.getMoveable().base;\n\n        el.remove ? el.remove() : el.parentElement.removeChild(el);\n        this.getMoveable().componentWillUnmount();\n        this.innerMoveable = null;\n    }\n    private getMoveable() {\n        return this.innerMoveable.preactMoveable;\n    }\n}\n/**\n * Whether or not the origin controlbox will be visible or not\n * @name Moveable#origin\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.origin = true;\n */\n/**\n * The target to indicate Moveable Control Box.\n * @name Moveable#target\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n */\n/**\n * Whether or not target can be dragged.\n * @name Moveable#draggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.draggable = true;\n */\n/**\n * Whether or not target can be resized.\n * @name Moveable#resizable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.resizable = true;\n */\n/**\n * Whether or not target can scaled.\n * @name Moveable#scalable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.scalable = true;\n */\n/**\n * Whether or not target can be rotated.\n * @name Moveable#rotatable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.rotatable = true;\n */\n/**\n * Whether or not target can be warped.\n * @name Moveable#warpable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.warpable = true;\n */\n/**\n * Whether or not target can be pinched with draggable, resizable, scalable, rotatable\n * @name Moveable#pinchable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.pinchable = true;\n */\n/**\n * When resize or scale, keeps a ratio of the width, height.\n * @name Moveable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.keepRatio = true;\n */\n/**\n * throttle of x, y when drag.\n * @name Moveable#throttleDrag\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleDrag = 1;\n */\n/**\n * throttle of width, height when resize.\n * @name Moveable#throttleResize\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleResize = 1;\n */\n/**\n * throttle of scaleX, scaleY when scale.\n * @name Moveable#throttleScale\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleScale = 0.1;\n */\n/**\n * hrottle of angle(degree) when rotate.\n * @name Moveable#throttleRotate\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleRotate = 1;\n */\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable\n * @event dragStart\n * @param {Moveable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable\n * @event drag\n * @param {Moveable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable\n * @event dragEnd\n * @param {Moveable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable\n * @event resizeStart\n * @param {Moveable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable\n * @event resize\n * @param {Moveable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable\n * @event resizeEnd\n * @param {Moveable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable\n * @event scaleStart\n * @param {Moveable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable\n * @event scale\n * @param {Moveable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable\n * @event scaleEnd\n * @param {Moveable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable\n * @event rotateStart\n * @param {Moveable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When rotating, the rotate event is called.\n * @memberof Moveable\n * @event rotate\n * @param {Moveable.OnRotate} - Parameters for the rotate event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotate\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable\n * @event rotateEnd\n * @param {Moveable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable\n* @event warpStart\n* @param {Moveable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n/**\n * When warping, the warp event is called.\n * @memberof Moveable\n * @event warp\n * @param {Moveable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable\n * @event warpEnd\n * @param {Moveable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable\n * @event pinchStart\n * @param {Moveable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable\n * @event pinch\n * @param {Moveable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable\n * @event pinchEnd\n * @param {Moveable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\ninterface Moveable extends MoveableGetterSetter {\n    on(eventName: \"drag\", handlerToAttach: (event: OnDrag) => any): this;\n    on(eventName: \"dragStart\", handlerToAttach: (event: OnDragStart) => any): this;\n    on(eventName: \"dragEnd\", handlerToAttach: (event: OnDragEnd) => any): this;\n    on(eventName: \"resize\", handlerToAttach: (event: OnResize) => any): this;\n    on(eventName: \"resizeStart\", handlerToAttach: (event: OnResizeStart) => any): this;\n    on(eventName: \"resizeEnd\", handlerToAttach: (event: OnResizeEnd) => any): this;\n    on(eventName: \"scale\", handlerToAttach: (event: OnScale) => any): this;\n    on(eventName: \"scaleStart\", handlerToAttach: (event: OnScaleStart) => any): this;\n    on(eventName: \"scaleEnd\", handlerToAttach: (event: OnScaleEnd) => any): this;\n    on(eventName: \"rotate\", handlerToAttach: (event: OnRotate) => any): this;\n    on(eventName: \"rotateStart\", handlerToAttach: (event: OnRotateStart) => any): this;\n    on(eventName: \"rotateEnd\", handlerToAttach: (event: OnRotateEnd) => any): this;\n    on(eventName: \"warp\", handlerToAttach: (event: OnWarp) => any): this;\n    on(eventName: \"warpStart\", handlerToAttach: (event: OnWarpStart) => any): this;\n    on(eventName: \"warpEnd\", handlerToAttach: (event: OnWarpEnd) => any): this;\n    on(eventName: \"pinch\", handlerToAttach: (event: OnPinch) => any): this;\n    on(eventName: \"pinchStart\", handlerToAttach: (event: OnPinchStart) => any): this;\n    on(eventName: \"pinchEnd\", handlerToAttach: (event: OnPinchEnd) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Moveable;\n","export const codes = {\n    draggable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\n/* const translate = [0, 0]; */\nconst draggable = new Moveable(document.body, {\n    target: document.querySelector(\".draggable\"),\n    draggable: true,\n    throttleDrag: 0,\n}).on(\"drag\", ({ left, top, beforeDelta }) => {\n    e.target.style.left = left + \"px\";\n    e.target.style.top = top + \"px\";\n\n    /* translate[0] += beforeDelta[0]; */\n    /* translate[1] += beforeDelta[1]; */\n    /* e.target.style.transform\n        = \"translateX(\" + translate[0] + \"px) \"\n        + \"translateY(\" + translate[1] + \"px)\"; */\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\nthis.translate = [0, 0];\nreturn (\n    <Moveable\n        target={document.querySelector(\".draggable\")}\n        draggable={true}\n        throttleDrag={0}\n        onDrag={({ left, top, beforeDelta }) => {\n            e.target.style.left = left + \"px\";\n            e.target.style.top = top + \"px\";\n\n            /* const translate = this.translate */\n            /* translate[0] += beforeDelta[0]; */\n            /* translate[1] += beforeDelta[1]; */\n            /* e.target.style.transform\n                = \"translateX(\" + translate[0] + \"px) \"\n                + \"translateY(\" + translate[1] + \"px)\"; */\n        }}\n    />\n);\n        `,\n    },\n    resizable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst resizable = new Moveable(document.body, {\n    target: document.querySelector(\".resizable\"),\n    resizable: true,\n    throttleResize: 0,\n    keepRatio: true,\n}).on(\"resize\", e => {\n    console.log(e.width, e.height, e.dist);\n    e.target.style.width = e.width + \"px\";\n    e.target.style.height = e.height + \"px\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".resizable\")}\n        resizable={true}\n        throttleResize={0}\n        keepRatio={true}\n        onResize={e => {\n            console.log(e.width, e.height, e.dist);\n            e.target.style.width = e.width + \"px\";\n            e.target.style.height = e.height + \"px\";\n        }}\n    />\n);\n        `,\n    },\n    scalable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst scale = [1, 1];\nconst scalable = new Moveable(document.body, {\n    target: document.querySelector(\".scalable\"),\n    scalable: true,\n    throttleScale: 0,\n    keepRatio: true,\n}).on(\"scale\", ({ dist }) => {\n    scale[0] *= dist[0];\n    scale[1] *= dist[1];\n    e.target.style.transform = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.scale = [1, 1];\nreturn (\n    <Moveable\n        target={document.querySelector(\".scalable\")}\n        scalable={true}\n        throttleScale={0}\n        keepRatio={true}\n        onScale={({ dist }) => {\n            const scale = this.scale;\n            scale[0] *= dist[0];\n            scale[1] *= dist[1];\n            e.target.style.transform\n                = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n        }}\n    />\n);\n        `,\n    },\n    rotatable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nlet rotate = 0;\n\nconst rotatable = new Moveable(document.body, {\n    target: document.querySelector(\".rotatable\"),\n    rotatable: true,\n    throttleRotate: 0,\n}).on(\"rotate\", ({ beforeDelta, delta }) => {\n    rotate += delta;\n    e.target.style.transform\n        = \"rotate(\" + rotate +  \"deg)\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.rotate = 0;\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".rotatable\")}\n        rotatable={true}\n        throttleRotate={0}\n        onRotate={({ beforeDelta, delta }) => {\n            this.rotate += delta;\n            e.target.style.transform\n                = \"rotate(\" + this.rotate +  \"deg)\";\n        }}\n    />\n);\n        `,\n    },\n    warpable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nlet matrix = [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n];\n\nconst warpable = new Moveable(document.body, {\n    target: document.querySelector(\".warpable\"),\n    warpable: true,\n    throttleRotate: 0,\n}).on(\"warp\", ({ multiply, delta }) => {\n    matrix = multiply(matrix, delta);\n    e.target.style.transform\n        = \"matrix3d(\" + matrix.join(\",\") +  \")\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.matrix = [\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1,\n];\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".warpable\")}\n        warpable={true}\n        onWarp={({ multiply, delta }) => {\n            this.matrix = multiply(this.matrix, delta);\n            e.target.style.transform\n                = \"matrix3d(\" + matrix.join(\",\") +  \")\";\n        }}\n    />\n);\n        `,\n    },\n    pinchable: {\n        vanilla: `\nimport Moveable from \"moveable\";\nconst scale = [1, 1];\nlet rotate = 0;\n\nconst pinchable = new Moveable(document.body, {\n    target: document.querySelector(\".pinchable\"),\n    pinchable: [\"rotatable\", \"scalable\"],\n}).on(\"rotate\", ({ target, beforeDelta }) => {\n    rotate += beforeDelta;\n    target.style.transform = \"scale(\" + scale.join(\", \") + \") rotate(\" + rotate + \"deg)\";\n}).on(\"scale\", ({ target, delta }) => {\n    scale[0] += delta[0];\n    scale[1] += delta[1];\n    target.style.transform = \"scale(\" + scale.join(\", \") + \") rotate(\" + rotate + \"deg)\";\n});`,\n    react: `\nimport Moveable from \"react-moveable\";\nthis.scale = [1, 1];\nthis.rotate = 0;\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".pinchable\")}\n        pinchable={[\"rotatable\", \"scalable\"]},\n        onRotate={({ target, beforeDelta }) => {\n            this.rotate += beforeDelta;\n            target.style.transform\n                = \"scale(\" + this.scale.join(\", \") + \") \"\n                + \"rotate(\" + this.rotate + \"deg)\";\n        }}\n        onScale={({ target, beforeDelta }) => {\n            this.scale[0] += delta[0];\n            this.scale[1] += delta[1];\n            target.style.transform\n                = \"scale(\" + this.scale.join(\", \") + \") \"\n                + \"rotate(\" + this.rotate + \"deg)\";\n        }}\n    />\n);`,\n    },\n    origin: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst rotatable = new Moveable(document.body, {\n    target: document.querySelector(\".origin\"),\n    rotatable: true,\n    origin: true,\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".origin\")}\n        rotatable={true}\n        origin={true}\n    />\n);\n        `,\n    },\n};\n","import Moveable from \"../../src/Moveable\";\nimport { codes } from \"./consts\";\nimport { Frame } from \"scenejs\";\nimport \"./index.css\";\nimport { hasClass } from \"@daybrush/utils\";\n\ndeclare const hljs: any;\n\nconst moveableElement: HTMLElement = document.querySelector(\".moveable\");\nconst labelElement: HTMLElement = document.querySelector(\".label\");\n\nconst frame = new Frame({\n    width: \"250px\",\n    height: \"200px\",\n    left: \"0px\",\n    top: \"0px\",\n    transform: {\n        rotate: \"0deg\",\n        scaleX: 1,\n        scaleY: 1,\n        matrix3d: [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ],\n    },\n});\n\nfunction setTransform(target: HTMLElement | SVGElement) {\n    target.style.cssText = frame.toCSS();\n}\nfunction setLabel(clientX: number, clientY: number, text: string) {\n    // tslint:disable-next-line: max-line-length\n\n    labelElement.style.cssText = `\n    display: block; transform: translate(${clientX}px, ${clientY - 10}px) translate(-100%, -100%);`;\n\n    labelElement.innerHTML = text;\n}\n\n\nconst moveable = new Moveable(moveableElement.parentElement, {\n    target: moveableElement,\n    origin: false,\n    draggable: true,\n    rotatable: true,\n    scalable: true,\n    pinchable: true,\n    keepRatio: false,\n    throttleDrag: 1,\n    throttleScale: 0.01,\n    throttleRotate: 0.2,\n    throttleResize: 1,\n}).on(\"pinch\", ({ clientX, clientY }) => {\n    setTimeout(() => {\n        setLabel(clientX, clientY, `X: ${frame.get(\"left\")}\n        <br/>Y: ${frame.get(\"top\")}\n        <br/>W: ${frame.get(\"width\")}\n        <br/>H: ${frame.get(\"height\")}\n        <br/>S: ${frame.get(\"transform\", \"scaleX\").toFixed(2)}, ${frame.get(\"transform\", \"scaleY\").toFixed(2)}\n        <br/>R: ${parseFloat(frame.get(\"transform\", \"rotate\")).toFixed(1)}deg\n        `);\n    });\n}).on(\"drag\", ({ target, left, top, clientX, clientY, isPinch }) => {\n    frame.set(\"left\", `${left}px`);\n    frame.set(\"top\", `${top}px`);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `X: ${left}px<br/>Y: ${top}px`);\n\n}).on(\"scale\", ({ target, dist, clientX, clientY, isPinch }) => {\n    const scaleX = frame.get(\"transform\", \"scaleX\") * dist[0];\n    const scaleY = frame.get(\"transform\", \"scaleY\") * dist[1];\n    frame.set(\"transform\", \"scaleX\", scaleX);\n    frame.set(\"transform\", \"scaleY\", scaleY);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `S: ${scaleX.toFixed(2)}, ${scaleY.toFixed(2)}`);\n\n}).on(\"rotate\", ({ target, beforeDelta, clientX, clientY, isPinch }) => {\n    const deg = parseFloat(frame.get(\"transform\", \"rotate\")) + beforeDelta;\n\n    frame.set(\"transform\", \"rotate\", `${deg}deg`);\n    setTransform(target);\n    !isPinch && setLabel(clientX, clientY, `R: ${deg.toFixed(1)}`);\n}).on(\"resize\", ({ target, width, height, clientX, clientY, isPinch }) => {\n    frame.set(\"width\", `${width}px`);\n    frame.set(\"height\", `${height}px`);\n    setTransform(target);\n    !isPinch &&  setLabel(clientX, clientY, `W: ${width}px<br/>H: ${height}px`);\n}).on(\"warp\", ({ target, multiply, delta, clientX, clientY }) => {\n    frame.set(\"transform\", \"matrix3d\", multiply(frame.get(\"transform\", \"matrix3d\"), delta));\n    setTransform(target);\n    setLabel(clientX, clientY, `X: ${clientX}px<br/>Y: ${clientY}px`);\n}).on(\"dragEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"scaleEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"rotateEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"resizeEnd\", () => {\n    labelElement.style.display = \"none\";\n}).on(\"warpEnd\", () => {\n    labelElement.style.display = \"none\";\n});\n\nconst draggableElement: HTMLElement = document.querySelector(\".draggable\");\nconst draggable = new Moveable(draggableElement.parentElement, {\n    target: draggableElement,\n    origin: false,\n    draggable: true,\n}).on(\"drag\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst resizableElement: HTMLElement = document.querySelector(\".resizable\");\nconst resizable = new Moveable(resizableElement.parentElement, {\n    target: resizableElement,\n    origin: false,\n    resizable: true,\n}).on(\"resize\", ({ target, width, height }) => {\n    target.style.width = `${width}px`;\n    target.style.height = `${height}px`;\n});\n\nconst scalableElement: HTMLElement = document.querySelector(\".scalable\");\nconst scalable = new Moveable(scalableElement.parentElement, {\n    target: scalableElement,\n    origin: false,\n    scalable: true,\n}).on(\"scale\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst rotatableElement: HTMLElement = document.querySelector(\".rotatable\");\nconst rotatable = new Moveable(rotatableElement.parentElement, {\n    target: rotatableElement,\n    origin: false,\n    rotatable: true,\n}).on(\"rotate\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\nconst warpableElement: HTMLElement = document.querySelector(\".warpable\");\nconst warpable = new Moveable(warpableElement.parentElement, {\n    target: warpableElement,\n    warpable: true,\n    origin: false,\n}).on(\"warp\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst originElement: HTMLElement = document.querySelector(\".origin\");\nconst origin = new Moveable(originElement.parentElement, {\n    target: originElement,\n    origin: true,\n    draggable: true,\n    rotatable: true,\n}).on(\"drag\", ({ target, left, top }) => {\n    target.style.left = `${left}px`;\n    target.style.top = `${top}px`;\n}).on(\"rotate\", ({ target, transform }) => {\n    target.style.transform = transform;\n});\n\nconst pinchableElement: HTMLElement = document.querySelector(\".pinchable\");\nconst scale = [1, 1];\nlet rotate = 0;\nconst pinchable = new Moveable(pinchableElement.parentElement, {\n    target: pinchableElement,\n    pinchable: [\"rotatable\", \"scalable\"],\n    origin: false,\n}).on(\"rotate\", ({ beforeDelta }) => {\n    rotate += beforeDelta;\n\n    pinchableElement.style.transform = `scale(${scale.join(\", \")}) rotate(${rotate}deg)`;\n}).on(\"scale\", ({ delta }) => {\n    scale[0] += delta[0];\n    scale[1] += delta[1];\n\n    pinchableElement.style.transform = `scale(${scale.join(\", \")}) rotate(${rotate}deg)`;\n});\n\nwindow.addEventListener(\"resize\", () => {\n    moveable.updateRect();\n    draggable.updateRect();\n    resizable.updateRect();\n    scalable.updateRect();\n    rotatable.updateRect();\n    warpable.updateRect();\n    pinchable.updateRect();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.querySelectorAll(\"pre\").forEach((pre: HTMLElement) => {\n        const group = pre.getAttribute(\"data-group\");\n        const panel = pre.getAttribute(\"data-panel\");\n        const block = pre.querySelector(\"code\");\n\n        let code = codes[group][panel === \"preact\" ? \"react\" : panel].trim();\n\n        if (panel === \"preact\") {\n            code = code.replace(/react/g, \"preact\");\n        }\n        block.innerText = code;\n        hljs.highlightBlock(block);\n    });\n});\n\nconst ableElement = document.querySelector(\".buttons.able\");\nconst ableButtonElements = [].slice.call(ableElement.children);\n\nableElement.addEventListener(\"click\", e => {\n    const target = (e.target as HTMLElement);\n    const able = target.getAttribute(\"data-able\");\n\n    if (!able) {\n        return;\n    }\n    ableButtonElements.forEach((el: HTMLElement) => {\n        el.classList.remove(\"selected\");\n    });\n    target.classList.add(\"selected\");\n\n    if (able === \"warpable\") {\n        moveable.resizable = false;\n        moveable.scalable = false;\n        moveable.warpable = true;\n    } else if (able === \"scalable\") {\n        moveable.resizable = false;\n        moveable.scalable = true;\n        moveable.warpable = false;\n    } else if (able === \"resizable\") {\n        moveable.resizable = true;\n        moveable.scalable = false;\n        moveable.warpable = false;\n    }\n});\n\nconst tabGroups = {};\n\n[].slice.call(document.querySelectorAll(\"[data-tab]\")).forEach(tabElement => {\n    const group = tabElement.getAttribute(\"data-group\");\n    const tab = tabElement.getAttribute(\"data-tab\");\n    const panelElement = document.querySelector(`[data-group=\"${group}\"][data-panel=\"${tab}\"]`);\n\n    !tabGroups[group] && (tabGroups[group] = []);\n    tabGroups[group].push([tabElement, panelElement]);\n\n    tabElement.addEventListener(\"click\", () => {\n        tabGroups[group].forEach(([otherTabElement, otherPanelElement]) => {\n            if (tabElement === otherTabElement) {\n                return;\n            }\n            otherTabElement.classList.remove(\"selected\");\n            otherPanelElement.classList.remove(\"selected\");\n        });\n        tabElement.classList.add(\"selected\");\n        panelElement.classList.add(\"selected\");\n    });\n});\n"],"names":["props","_super","_this","state","tslib_1","h","Moveable","ref","this","Component","PROPERTIES","EVENTS","parentElement","options","element","document","createElement","nextOptions","container","events","forEach","name","camelize","e","trigger","render","InnerMoveable","appendChild","children","target","getMoveable","isMoveableElement","updateRect","updateTarget","el","base","remove","removeChild","componentWillUnmount","innerMoveable","preactMoveable","Properties","prototype","property","Object","defineProperty","get","set","value","setState","enumerable","configurable","EgComponent","codes","draggable","vanilla","react","resizable","scalable","rotatable","warpable","pinchable","origin","moveableElement","querySelector","labelElement","frame","Frame","width","height","left","top","transform","rotate","scaleX","scaleY","matrix3d","setTransform","style","cssText","toCSS","setLabel","clientX","clientY","text","innerHTML","moveable","keepRatio","throttleDrag","throttleScale","throttleRotate","throttleResize","on","_a","setTimeout","toFixed","parseFloat","isPinch","dist","beforeDelta","deg","multiply","delta","display","draggableElement","resizableElement","scalableElement","rotatableElement","warpableElement","originElement","pinchableElement","scale","join","window","addEventListener","querySelectorAll","pre","group","getAttribute","panel","block","code","trim","replace","innerText","hljs","highlightBlock","ableElement","ableButtonElements","slice","call","able","classList","add","tabGroups","tabElement","tab","panelElement","push","otherTabElement","otherPanelElement"],"mappings":";;;;;;;;uhtDAOgBA,SACRC,YAAMD,gBAHHE,QAAuB,GAI1BA,EAAKC,MAAQD,EAAKF,eALiBI,0BAOvC,kBACWC,EAACC,MAASC,IAAKA,EAAIC,KAAM,mBAAuBA,KAAKL,YARzBM,GCH9BC,GAAa,CACxB,YAAa,YAAa,WAAY,YACtC,WAAY,YAAa,SAAU,SACnC,eAAgB,iBAAkB,iBAAkB,aAEzCC,GAAS,CACpB,YACA,OACA,UACA,cACA,SACA,YACA,aACA,QACA,WACA,cACA,SACA,YACA,YACA,OACA,UACA,aACA,QACA,sCCccC,EAAyCC,gBAAAA,YACjDZ,mBACMa,EAAUC,SAASC,cAAc,OACjCC,KAAgBC,UAAWN,GAAkBC,GAE7CM,EAAc,UAEpBR,GAAOS,QAAQ,SAAAC,GACXF,uFAAOG,CAAS,MAAMD,IAAW,SAACE,UAAWrB,EAAKsB,QAAQH,EAAME,wCAGpEE,CACIpB,EAACqB,MACGnB,IAAKA,EAAIL,EAAM,kBACXe,EACAE,IAERL,GAEJF,EAAce,YAAYb,EAAQc,SAAS,MAzB5BxB,oDAyCnB,SAAyByB,UACdrB,KAAKsB,cAAcC,kBAAkBF,iBAahD,gBACSC,cAAcE,6BAYvB,gBACSF,cAAcG,0BAWvB,eACUC,EAAK1B,KAAKsB,cAAcK,KAE9BD,EAAGE,OAASF,EAAGE,SAAWF,EAAGtB,cAAcyB,YAAYH,QAClDJ,cAAcQ,4BACdC,cAAgB,oBAEzB,kBACW/B,KAAK+B,cAAcC,gBAxF5BlC,0ZAdLmC,CAAW/B,GAAY,SAACgC,EAAWC,GAChCC,OAAOC,eAAeH,EAAWC,EAAU,CACvCG,sBACWtC,KAAKsB,cAAc9B,MAAM2C,IAEpCI,aAAIC,cACKT,cAAcU,iBACdN,GAAWK,OAGpBE,YAAY,EACZC,cAAc,OAGhB7C,IAAiB8C,GChCVC,GAAQ,CACjBC,UAAW,CACPC,QAAS,okBAmBTC,MAAO,urBAuBXC,UAAW,CACPF,QAAS,6XAcTC,MAAO,yaAkBXE,SAAU,CACNH,QAAS,kZAeTC,MAAO,sfAqBXG,UAAW,CACPJ,QAAS,uWAeTC,MAAO,0ZAmBXI,SAAU,CACNL,QAAS,gcAoBTC,MAAO,wdAuBXK,UAAW,CACPN,QAAS,okBAgBbC,MAAO,8vBAyBPM,OAAQ,CACJP,QAAS,gMASTC,MAAO,+mNC7OTO,GAA+BhD,SAASiD,cAAc,aACtDC,GAA4BlD,SAASiD,cAAc,UAEnDE,GAAQ,IAAIC,GAAM,CACpBC,MAAO,QACPC,OAAQ,QACRC,KAAM,MACNC,IAAK,MACLC,UAAW,CACPC,OAAQ,OACRC,OAAQ,EACRC,OAAQ,EACRC,SAAU,CACN,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,EACT,EAAG,EAAG,EAAG,MAKrB,SAASC,GAAahD,GAClBA,EAAOiD,MAAMC,QAAUb,GAAMc,QAEjC,SAASC,GAASC,EAAiBC,EAAiBC,GAGhDnB,GAAaa,MAAMC,QAAU,8CACUG,UAAcC,EAAU,mCAE/DlB,GAAaoB,UAAYD,EAI7B,IAAME,GAAW,IAAIhF,GAASyD,GAAgBnD,cAAe,CACzDiB,OAAQkC,GACRD,QAAQ,EACRR,WAAW,EACXK,WAAW,EACXD,UAAU,EACVG,WAAW,EACX0B,WAAW,EACXC,aAAc,EACdC,cAAe,IACfC,eAAgB,GAChBC,eAAgB,IACjBC,GAAG,QAAS,SAACC,OAAEX,YAASC,YACvBW,WAAW,WACPb,GAASC,EAASC,EAAS,MAAMjB,GAAMpB,IAAI,6BACjCoB,GAAMpB,IAAI,4BACVoB,GAAMpB,IAAI,8BACVoB,GAAMpB,IAAI,+BACVoB,GAAMpB,IAAI,YAAa,UAAUiD,QAAQ,QAAO7B,GAAMpB,IAAI,YAAa,UAAUiD,QAAQ,wBACzFC,WAAW9B,GAAMpB,IAAI,YAAa,WAAWiD,QAAQ,wBAGpEH,GAAG,OAAQ,SAACC,OAAEhE,WAAQyC,SAAMC,QAAKW,YAASC,YAASc,YAClD/B,GAAMnB,IAAI,OAAWuB,QACrBJ,GAAMnB,IAAI,MAAUwB,QACpBM,GAAahD,GACZoE,GAAWhB,GAASC,EAASC,EAAS,MAAMb,eAAiBC,UAE/DqB,GAAG,QAAS,SAACC,OAAEhE,WAAQqE,SAAMhB,YAASC,YAASc,YACxCvB,EAASR,GAAMpB,IAAI,YAAa,UAAYoD,EAAK,GACjDvB,EAAST,GAAMpB,IAAI,YAAa,UAAYoD,EAAK,GACvDhC,GAAMnB,IAAI,YAAa,SAAU2B,GACjCR,GAAMnB,IAAI,YAAa,SAAU4B,GACjCE,GAAahD,GACZoE,GAAWhB,GAASC,EAASC,EAAS,MAAMT,EAAOqB,QAAQ,QAAOpB,EAAOoB,QAAQ,MAEnFH,GAAG,SAAU,SAACC,OAAEhE,WAAQsE,gBAAajB,YAASC,YAASc,YAChDG,EAAMJ,WAAW9B,GAAMpB,IAAI,YAAa,WAAaqD,EAE3DjC,GAAMnB,IAAI,YAAa,SAAaqD,SACpCvB,GAAahD,GACZoE,GAAWhB,GAASC,EAASC,EAAS,MAAMiB,EAAIL,QAAQ,MAC1DH,GAAG,SAAU,SAACC,OAAEhE,WAAQuC,UAAOC,WAAQa,YAASC,YAASc,YACxD/B,GAAMnB,IAAI,QAAYqB,QACtBF,GAAMnB,IAAI,SAAasB,QACvBQ,GAAahD,GACZoE,GAAYhB,GAASC,EAASC,EAAS,MAAMf,eAAkBC,UACjEuB,GAAG,OAAQ,SAACC,OAAEhE,WAAQwE,aAAUC,UAAOpB,YAASC,YAC/CjB,GAAMnB,IAAI,YAAa,WAAYsD,EAASnC,GAAMpB,IAAI,YAAa,YAAawD,IAChFzB,GAAahD,GACboD,GAASC,EAASC,EAAS,MAAMD,eAAoBC,UACtDS,GAAG,UAAW,WACb3B,GAAaa,MAAMyB,QAAU,SAC9BX,GAAG,WAAY,WACd3B,GAAaa,MAAMyB,QAAU,SAC9BX,GAAG,YAAa,WACf3B,GAAaa,MAAMyB,QAAU,SAC9BX,GAAG,YAAa,WACf3B,GAAaa,MAAMyB,QAAU,SAC9BX,GAAG,UAAW,WACb3B,GAAaa,MAAMyB,QAAU,SAG3BC,GAAgCzF,SAASiD,cAAc,cACvDV,GAAY,IAAIhD,GAASkG,GAAiB5F,cAAe,CAC3DiB,OAAQ2E,GACR1C,QAAQ,EACRR,WAAW,IACZsC,GAAG,OAAQ,SAACC,OAAEhE,WAAQ2C,cACrB3C,EAAOiD,MAAMN,UAAYA,IAGvBiC,GAAgC1F,SAASiD,cAAc,cACvDP,GAAY,IAAInD,GAASmG,GAAiB7F,cAAe,CAC3DiB,OAAQ4E,GACR3C,QAAQ,EACRL,WAAW,IACZmC,GAAG,SAAU,SAACC,OAAEhE,WAAQuC,UAAOC,WAC9BxC,EAAOiD,MAAMV,MAAWA,OACxBvC,EAAOiD,MAAMT,OAAYA,SAGvBqC,GAA+B3F,SAASiD,cAAc,aACtDN,GAAW,IAAIpD,GAASoG,GAAgB9F,cAAe,CACzDiB,OAAQ6E,GACR5C,QAAQ,EACRJ,UAAU,IACXkC,GAAG,QAAS,SAACC,OAAEhE,WAAQ2C,cACtB3C,EAAOiD,MAAMN,UAAYA,IAGvBmC,GAAgC5F,SAASiD,cAAc,cACvDL,GAAY,IAAIrD,GAASqG,GAAiB/F,cAAe,CAC3DiB,OAAQ8E,GACR7C,QAAQ,EACRH,WAAW,IACZiC,GAAG,SAAU,SAACC,OAAEhE,WAAQ2C,cACvB3C,EAAOiD,MAAMN,UAAYA,IAEvBoC,GAA+B7F,SAASiD,cAAc,aACtDJ,GAAW,IAAItD,GAASsG,GAAgBhG,cAAe,CACzDiB,OAAQ+E,GACRhD,UAAU,EACVE,QAAQ,IACT8B,GAAG,OAAQ,SAACC,OAAEhE,WAAQ2C,cACrB3C,EAAOiD,MAAMN,UAAYA,IAGvBqC,GAA6B9F,SAASiD,cAAc,WAapD8C,IAZS,IAAIxG,GAASuG,GAAcjG,cAAe,CACrDiB,OAAQgF,GACR/C,QAAQ,EACRR,WAAW,EACXK,WAAW,IACZiC,GAAG,OAAQ,SAACC,OAAEhE,WAAQyC,SAAMC,QAC3B1C,EAAOiD,MAAMR,KAAUA,OACvBzC,EAAOiD,MAAMP,IAASA,SACvBqB,GAAG,SAAU,SAACC,OAAEhE,WAAQ2C,cACvB3C,EAAOiD,MAAMN,UAAYA,IAGSzD,SAASiD,cAAc,eACvD+C,GAAQ,CAAC,EAAG,GACdtC,GAAS,EACPZ,GAAY,IAAIvD,GAASwG,GAAiBlG,cAAe,CAC3DiB,OAAQiF,GACRjD,UAAW,CAAC,YAAa,YACzBC,QAAQ,IACT8B,GAAG,SAAU,SAACC,OAAEM,gBACf1B,IAAU0B,EAEVW,GAAiBhC,MAAMN,UAAY,SAASuC,GAAMC,KAAK,kBAAiBvC,YACzEmB,GAAG,QAAS,SAACC,OAAES,UACdS,GAAM,IAAMT,EAAM,GAClBS,GAAM,IAAMT,EAAM,GAElBQ,GAAiBhC,MAAMN,UAAY,SAASuC,GAAMC,KAAK,kBAAiBvC,YAG5EwC,OAAOC,iBAAiB,SAAU,WAC9B5B,GAAStD,aACTsB,GAAUtB,aACVyB,GAAUzB,aACV0B,GAAS1B,aACT2B,GAAU3B,aACV4B,GAAS5B,aACT6B,GAAU7B,eAGdjB,SAASmG,iBAAiB,mBAAoB,WAC1CnG,SAASoG,iBAAiB,OAAO/F,QAAQ,SAACgG,OAChCC,EAAQD,EAAIE,aAAa,cACzBC,EAAQH,EAAIE,aAAa,cACzBE,EAAQJ,EAAIpD,cAAc,QAE5ByD,EAAOpE,GAAMgE,GAAiB,WAAVE,EAAqB,QAAUA,GAAOG,OAEhD,WAAVH,IACAE,EAAOA,EAAKE,QAAQ,SAAU,WAElCH,EAAMI,UAAYH,EAClBI,KAAKC,eAAeN,OAI5B,IAAMO,GAAchH,SAASiD,cAAc,iBACrCgE,GAAqB,GAAGC,MAAMC,KAAKH,GAAYnG,UAErDmG,GAAYb,iBAAiB,QAAS,SAAA3F,OAC5BM,EAAUN,EAAEM,OACZsG,EAAOtG,EAAOyF,aAAa,aAE5Ba,IAGLH,GAAmB5G,QAAQ,SAACc,GACxBA,EAAGkG,UAAUhG,OAAO,cAExBP,EAAOuG,UAAUC,IAAI,YAER,aAATF,GACA7C,GAAS7B,WAAY,EACrB6B,GAAS5B,UAAW,EACpB4B,GAAS1B,UAAW,GACJ,aAATuE,GACP7C,GAAS7B,WAAY,EACrB6B,GAAS5B,UAAW,EACpB4B,GAAS1B,UAAW,GACJ,cAATuE,IACP7C,GAAS7B,WAAY,EACrB6B,GAAS5B,UAAW,EACpB4B,GAAS1B,UAAW,MAI5B,IAAM0E,GAAY,GAElB,GAAGL,MAAMC,KAAKnH,SAASoG,iBAAiB,eAAe/F,QAAQ,SAAAmH,OACrDlB,EAAQkB,EAAWjB,aAAa,cAChCkB,EAAMD,EAAWjB,aAAa,YAC9BmB,EAAe1H,SAASiD,cAAc,gBAAgBqD,oBAAuBmB,QAElFF,GAAUjB,KAAWiB,GAAUjB,GAAS,IACzCiB,GAAUjB,GAAOqB,KAAK,CAACH,EAAYE,IAEnCF,EAAWrB,iBAAiB,QAAS,WACjCoB,GAAUjB,GAAOjG,QAAQ,SAACyE,OAAC8C,OAAiBC,OACpCL,IAAeI,IAGnBA,EAAgBP,UAAUhG,OAAO,YACjCwG,EAAkBR,UAAUhG,OAAO,eAEvCmG,EAAWH,UAAUC,IAAI,YACzBI,EAAaL,UAAUC,IAAI"}