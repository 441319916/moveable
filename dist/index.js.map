{"version":3,"file":"index.js","sources":["../../src/InnerMoveable.tsx","../../src/Moveable.tsx","../src/consts.ts","../src/index.ts"],"sourcesContent":["import { Component, h } from \"preact\";\nimport Moveable, { MoveableProps, MoveableInterface } from \"preact-moveable\";\nimport { ref } from \"framework-utils\";\n\nexport default class InnerMoveable extends Component<MoveableProps> {\n    public state: MoveableProps = {};\n    public preactMoveable: MoveableInterface;\n    constructor(props: MoveableProps) {\n        super(props);\n        this.state = this.props;\n    }\n    public render() {\n        return <Moveable ref={ref(this, \"preactMoveable\")} {...this.state} />;\n    }\n}\n","import EgComponent from \"@egjs/component\";\nimport { ref } from \"framework-utils\";\nimport { h, render } from \"preact\";\nimport InnerMoveable from \"./InnerMoveable\";\nimport { MoveableOptions } from \"./types\";\nimport {\n    OnDragStart, OnDrag, OnResize, OnResizeStart,\n    OnResizeEnd, OnScaleStart, OnScaleEnd, OnRotateStart,\n    OnRotateEnd, OnDragEnd, OnRotate, OnScale,\n} from \"react-moveable/declaration/types\";\n\n/**\n * Moveable is Draggable! Resizable! Scalable! Rotatable!\n * @sort 1\n * @extends eg.Component\n */\nclass Moveable extends EgComponent {\n    private innerMoveable!: any;\n\n    /**\n     *\n     */\n    constructor(parentElement: HTMLElement | SVGElement, options: MoveableOptions = {}) {\n        super();\n        const element = document.createElement(\"div\");\n\n        render(\n            <InnerMoveable\n                ref={ref(this, \"innerMoveable\")}\n                {...options}\n                onDragStart={this.onDragStart}\n                onDrag={this.onDrag}\n                onDragEnd={this.onDragEnd}\n                onResizeStart={this.onResizeStart}\n                onResize={this.onResize}\n                onResizeEnd={this.onResizeEnd}\n                onScaleStart={this.onScaleStart}\n                onScale={this.onScale}\n                onScaleEnd={this.onScaleEnd}\n                onRotateStart={this.onRotateStart}\n                onRotate={this.onRotate}\n                onRotateEnd={this.onRotateEnd}\n            />,\n            element,\n        );\n        parentElement.appendChild(element.children[0]);\n    }\n    /**\n     * target is target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.origin = true;\n     */\n    get origin() {\n        return this.getMoveableProps().origin;\n    }\n    set origin(origin: boolean) {\n        this.innerMoveable.setState({\n            origin,\n        });\n    }\n    /**\n     * target is target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     * moveable.target = document.querySelector(\".target\");\n     */\n    get target(): HTMLElement | SVGElement {\n        return this.getMoveableProps().target;\n    }\n    set target(target: HTMLElement | SVGElement) {\n        if (target !== this.target) {\n            this.innerMoveable.setState({\n                target,\n            });\n        } else {\n            this.updateRect();\n        }\n    }\n    /**\n     * Whether or not target can be dragged.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.draggable = true;\n     */\n    get draggable(): boolean {\n        return this.getMoveableProps().draggable || false;\n    }\n    set draggable(draggable: boolean) {\n        this.innerMoveable.setState({\n            draggable,\n        });\n    }\n    /**\n     * Whether or not target can be resized.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.resizable = true;\n     */\n    get resizable(): boolean {\n        return this.getMoveableProps().resizable;\n    }\n    set resizable(resizable: boolean) {\n        this.innerMoveable.setState({\n            resizable,\n        });\n    }\n    /**\n     * Whether or not target can scaled.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.scalable = true;\n     */\n    get scalable(): boolean {\n        return this.getMoveableProps().scalable;\n    }\n    set scalable(scalable: boolean) {\n        this.innerMoveable.setState({\n            scalable,\n        });\n    }\n    /**\n     * Whether or not target can be rotated.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.rotatable = true;\n     */\n    get rotatable(): boolean {\n        return this.getMoveableProps().rotatable;\n    }\n    set rotatable(rotatable: boolean) {\n        this.innerMoveable.setState({\n            rotatable,\n        });\n    }\n    /**\n     * Move the moveable as much as the `pos`.\n     * @param - the values of x and y to move moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.move([0, -10]);\n     */\n    public move(pos: number[]) {\n        this.getMoveable().move(pos);\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: HTMLElement | SVGElement) {\n        return this.getMoveable().isMoveableElement(target);\n    }\n    /**\n     * If the width, height, left, and top of the target change, update the shape of the moveable.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect() {\n        this.getMoveable().updateRect();\n    }\n    private getMoveable() {\n        return this.innerMoveable.preactMoveable;\n    }\n    private getMoveableProps() {\n        return this.getMoveable().props;\n    }\n    private onDragStart = (e: OnDragStart) => {\n        this.trigger(\"dragStart\", e);\n    }\n    private onDrag = (e: OnDrag) => {\n        this.trigger(\"drag\", e);\n    }\n    private onDragEnd = (e: OnDragEnd) => {\n        this.trigger(\"dragEnd\", e);\n    }\n    private onResizeStart = (e: OnResizeStart) => {\n        this.trigger(\"resizeStart\", e);\n    }\n    private onResize = (e: OnResize) => {\n        this.trigger(\"resize\", e);\n    }\n    private onResizeEnd = (e: OnResizeEnd) => {\n        this.trigger(\"resizeEnd\", e);\n    }\n    private onScaleStart = (e: OnScaleStart) => {\n        this.trigger(\"scaleStart\", e);\n    }\n    private onScale = (e: OnScale) => {\n        this.trigger(\"scale\", e);\n    }\n    private onScaleEnd = (e: OnScaleEnd) => {\n        this.trigger(\"scaleEnd\", e);\n    }\n    private onRotateStart = (e: OnRotateStart) => {\n        this.trigger(\"rotateStart\", e);\n    }\n    private onRotate = (e: OnRotate) => {\n        this.trigger(\"rotate\", e);\n    }\n    private onRotateEnd = (e: OnRotateEnd) => {\n        this.trigger(\"rotateEnd\", e);\n    }\n}\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable\n * @event dragStart\n * @param {Moveable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable\n * @event drag\n * @param {Moveable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable\n * @event dragEnd\n * @param {Moveable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable\n * @event resizeStart\n * @param {Moveable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable\n * @event resize\n * @param {Moveable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable\n * @event resizeEnd\n * @param {Moveable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable\n * @event scaleStart\n * @param {Moveable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, the scale event is called.\n * @memberof Moveable\n * @event scale\n * @param {Moveable.OnScale} - Parameters for the scale event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the scaleEnd event is called.\n * @memberof Moveable\n * @event scaleEnd\n * @param {Moveable.OnScaleEnd} - Parameters for the scaleEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable\n * @event rotateStart\n * @param {Moveable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When rotating, the rotate event is called.\n * @memberof Moveable\n * @event rotate\n * @param {Moveable.OnRotate} - Parameters for the rotate event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotate\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable\n * @event rotateEnd\n * @param {Moveable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\nexport default Moveable;\n","export const codes = {\n    draggable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\n/* const translate = [0, 0]; */\nconst draggable = new Moveable(document.body, {\n    target: document.querySelector(\".draggable\"),\n    draggable: true,\n}).on(\"drag\", ({ left, top, beforeDelta }) => {\n    e.target.style.left = left + \"px\";\n    e.target.style.top = top + \"px\";\n\n    /* translate[0] += beforeDelta[0]; */\n    /* translate[1] += beforeDelta[1]; */\n    /* e.target.style.transform\n        = \"translateX(\" + translate[0] + \"px) \"\n        + \"translateY(\" + translate[1] + \"px)\"; */\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\nthis.translate = [0, 0];\nreturn (\n    <Moveable\n        target={document.querySelector(\".draggable\")}\n        draggable={true}\n        onDrag={({ left, top, beforeDelta }) => {\n            e.target.style.left = left + \"px\";\n            e.target.style.top = top + \"px\";\n\n            /* const translate = this.translate */\n            /* translate[0] += beforeDelta[0]; */\n            /* translate[1] += beforeDelta[1]; */\n            /* e.target.style.transform\n                = \"translateX(\" + translate[0] + \"px) \"\n                + \"translateY(\" + translate[1] + \"px)\"; */\n        }}\n    />\n);\n        `,\n    },\n    resizable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst resizable = new Moveable(document.body, {\n    target: document.querySelector(\".resizable\"),\n    resizable: true,\n}).on(\"resize\", e => {\n    console.log(e.width, e.height, e.dist);\n    e.target.style.width = e.width + \"px\";\n    e.target.style.height = e.height + \"px\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".resizable\")}\n        resizable={true}\n        onResize={e => {\n            console.log(e.width, e.height, e.dist);\n            e.target.style.width = e.width + \"px\";\n            e.target.style.height = e.height + \"px\";\n        }}\n    />\n);\n        `,\n    },\n    scalable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nconst scale = [1, 1];\nconst scalable = new Moveable(document.body, {\n    target: document.querySelector(\".scalable\"),\n    scalable: true,\n}).on(\"scale\", ({ dist }) => {\n    scale[0] *= dist[0];\n    scale[1] *= dist[1];\n    e.target.style.transform = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.scale = [1, 1];\nreturn (\n    <Moveable\n        target={document.querySelector(\".scalable\")}\n        scalable={true}\n        onScale={({ dist }) => {\n            const scale = this.scale;\n            scale[0] *= dist[0];\n            scale[1] *= dist[1];\n            e.target.style.transform\n                = \"scale(\" + scale[0] +  \",\" + scale[1] + \")\";\n        }}\n    />\n);\n        `,\n    },\n    rotatable: {\n        vanilla: `\nimport Moveable from \"moveable\";\n\nlet rotate = 0;\n\nconst rotatable = new Moveable(document.body, {\n    target: document.querySelector(\".rotatable\"),\n    rotatable: true,\n}).on(\"rotate\", ({ beforeDelta }) => {\n    rotate += beforeDelta;\n    e.target.style.transform\n        = \"rotate(\" + rotate +  \"deg)\";\n});\n        `,\n        react: `\nimport Moveable from \"react-moveable\";\n\nthis.rotate = 0;\n\nreturn (\n    <Moveable\n        target={document.querySelector(\".rotatable\")}\n        rotatable={true}\n        onRotate={({ beforeDelta }) => {\n            this.rotate += beforeDelta;\n            e.target.style.transform\n                = \"rotate(\" + this.rotate +  \"deg)\";\n        }}\n    />\n);\n        `,\n    },\n};\n","import Moveable from \"../../src/Moveable\";\nimport { OnDrag, OnScale, OnRotate, OnResize } from \"preact-moveable\";\nimport { codes } from \"./consts\";\nimport \"./index.css\";\n\ndeclare const hljs: any;\n\nconst moveableElement: HTMLElement = document.querySelector(\".moveable\");\n\nlet rotate: number = 0;\nconst translate = [0, 0];\nconst scale = [1, 1];\n\nfunction setTransform(target: HTMLElement | SVGElement) {\n    target.style.transform = `translate(${translate[0]}px, ${translate[1]}px) rotate(${rotate}deg) scale(${scale[0]}, ${scale[1]})`;\n}\nconst moveable = new Moveable(moveableElement.parentElement, {\n    target: moveableElement,\n    container: moveableElement.parentElement,\n    origin: false,\n    draggable: true,\n    rotatable: true,\n    scalable: true,\n}).on(\"drag\", ({ target, left, top }: OnDrag) => {\n    target.style.left = `${left}px`;\n    target.style.top = `${top}px`;\n}).on(\"scale\", ({ target, dist }: OnScale) => {\n    scale[0] *= dist[0];\n    scale[1] *= dist[1];\n    setTransform(target);\n}).on(\"rotate\", ({ target, beforeDelta }: OnRotate) => {\n    rotate += beforeDelta;\n    setTransform(target);\n}).on(\"resize\", ({ target, width, height }: OnResize) => {\n    target.style.width = `${width}px`;\n    target.style.height = `${height}px`;\n});\n\nconst draggableElement: HTMLElement = document.querySelector(\".draggable\");\nconst draggable = new Moveable(draggableElement.parentElement, {\n    target: draggableElement,\n    container: draggableElement.parentElement,\n    origin: false,\n    draggable: true,\n}).on(\"drag\", ({ target, transform }: OnDrag) => {\n    target.style.transform = transform;\n});\n\nconst resizableElement: HTMLElement = document.querySelector(\".resizable\");\nconst resizable = new Moveable(resizableElement.parentElement, {\n    target: resizableElement,\n    container: resizableElement.parentElement,\n    origin: false,\n    resizable: true,\n}).on(\"resize\", ({ target, width, height}: OnResize) => {\n    target.style.width = `${width}px`;\n    target.style.height = `${height}px`;\n});\n\nconst scalableElement: HTMLElement = document.querySelector(\".scalable\");\nconst scalable = new Moveable(scalableElement.parentElement, {\n    target: scalableElement,\n    container: scalableElement.parentElement,\n    origin: false,\n    scalable: true,\n}).on(\"scale\", ({ target, transform }: OnScale) => {\n    target.style.transform = transform;\n});\n\nconst rotatableElement: HTMLElement = document.querySelector(\".rotatable\");\nconst rotatable = new Moveable(rotatableElement.parentElement, {\n    target: rotatableElement,\n    container: rotatableElement.parentElement,\n    origin: false,\n    rotatable: true,\n}).on(\"rotate\", ({ target, transform }: OnRotate) => {\n    target.style.transform = transform;\n});\n\nwindow.addEventListener(\"resize\", () => {\n    moveable.updateRect();\n    draggable.updateRect();\n    resizable.updateRect();\n    scalable.updateRect();\n    rotatable.updateRect();\n});\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.querySelectorAll(\"pre\").forEach((pre: HTMLElement) => {\n        const group = pre.getAttribute(\"data-group\");\n        const panel = pre.getAttribute(\"data-panel\");\n        const block = pre.querySelector(\"code\");\n\n        let code = codes[group][panel === \"preact\" ? \"react\" : panel].trim();\n\n        if (panel === \"preact\") {\n            code = code.replace(/react/g, \"preact\");\n        }\n        block.innerText = code;\n        hljs.highlightBlock(block);\n    });\n});\n\nconst tabGroups = {};\n\n[].slice.call(document.querySelectorAll(\"[data-tab]\")).forEach(tabElement => {\n    const group = tabElement.getAttribute(\"data-group\");\n    const tab = tabElement.getAttribute(\"data-tab\");\n    const panelElement = document.querySelector(`[data-group=\"${group}\"][data-panel=\"${tab}\"]`);\n\n    !tabGroups[group] && (tabGroups[group] = []);\n    tabGroups[group].push([tabElement, panelElement]);\n\n    tabElement.addEventListener(\"click\", () => {\n        tabGroups[group].forEach(([otherTabElement, otherPanelElement]) => {\n            if (tabElement === otherTabElement) {\n                return;\n            }\n            otherTabElement.classList.remove(\"selected\");\n            otherPanelElement.classList.remove(\"selected\");\n        });\n        tabElement.classList.add(\"selected\");\n        panelElement.classList.add(\"selected\");\n    });\n});\n"],"names":["props","_super","_this","state","tslib_1","h","Moveable","ref","this","Component","parentElement","options","e","trigger","element","document","createElement","render","InnerMoveable","onDragStart","onDrag","onDragEnd","onResizeStart","onResize","onResizeEnd","onScaleStart","onScale","onScaleEnd","onRotateStart","onRotate","onRotateEnd","appendChild","children","Object","getMoveableProps","origin","innerMoveable","setState","target","updateRect","draggable","resizable","scalable","rotatable","pos","getMoveable","move","isMoveableElement","preactMoveable","EgComponent","codes","vanilla","react","moveableElement","querySelector","rotate","translate","scale","setTransform","style","transform","moveable","container","on","_a","left","top","dist","beforeDelta","width","height","draggableElement","resizableElement","scalableElement","rotatableElement","window","addEventListener","querySelectorAll","forEach","pre","group","getAttribute","panel","block","code","trim","replace","innerText","hljs","highlightBlock","tabGroups","slice","call","tabElement","tab","panelElement","push","otherTabElement","otherPanelElement","classList","remove","add"],"mappings":"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"}